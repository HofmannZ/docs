"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[3553],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8215:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7294);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return c}});var n=a(7462),r=a(7294),l=a(2389),i=a(5979),o=a(6010),s="tabItem_LplD";function u(e){var t,a,l,u=e.lazy,c=e.block,p=e.defaultValue,d=e.values,m=e.groupId,g=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,i.lx)(h,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(t=null!=p?p:null==(a=f.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=f[0])?void 0:l.props.value;if(null!==v&&!h.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,i.UB)(),b=w.tabGroupChoices,y=w.setTabGroupChoices,T=(0,r.useState)(v),N=T[0],P=T[1],C=[],_=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var x=b[m];null!=x&&x!==N&&h.some((function(e){return e.value===x}))&&P(x)}var O=function(e){var t=e.currentTarget,a=C.indexOf(t),n=h[a].value;n!==N&&(_(t),P(n),null!=m&&y(m,n))},I=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.currentTarget)+1;a=C[n]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;a=C[r]||C[C.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},g)},h.map((function(e){var t=e.value,a=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:function(e){return C.push(e)},onKeyDown:I,onFocus:O,onClick:O},l,{className:(0,o.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":N===t})}),null!=a?a:t)}))),u?(0,r.cloneElement)(f.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function c(e){var t=(0,l.Z)();return r.createElement(u,(0,n.Z)({key:String(t)},e))}},4799:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(9877),o=a(8215),s=["components"],u={},c="Wireguard Guide",p={unversionedId:"stake-pool-guides/wireguard-guide",id:"stake-pool-guides/wireguard-guide",title:"Wireguard Guide",description:"From the WireGuard project homepage:",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/stake-pool-guides/wireguard-guide.mdx",sourceDirName:"stake-pool-guides",slug:"/stake-pool-guides/wireguard-guide",permalink:"/armada-alliance-docusaurus/es/docs/stake-pool-guides/wireguard-guide",editUrl:"https://github.com/rekuenkdr/armada-alliance-docusaurus/edit/master/docs/stake-pool-guides/wireguard-guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CNCLI Leader Logs \ud83d\udcd1",permalink:"/armada-alliance-docusaurus/es/docs/stake-pool-guides/leader-logs"},next:{title:"Grafana Alerts with Telegram",permalink:"/armada-alliance-docusaurus/es/docs/stake-pool-guides/grafana-alerts-with-telegram"}},d={},m=[{value:"Install Wireguard",id:"install-wireguard",level:3},{value:"Configure",id:"configure",level:4},{value:"wg-quick",id:"wg-quick",level:4},{value:"Topology",id:"topology",level:4},{value:"Prometheus",id:"prometheus",level:4},{value:"UFW",id:"ufw",level:3}],g={toc:m};function f(e){var t=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"wireguard-guide"},"Wireguard Guide"),(0,l.kt)("p",null,"From the ",(0,l.kt)("a",{parentName:"p",href:"https://www.wireguard.com"},"WireGuard")," project homepage:"),(0,l.kt)("p",null,"WireGuard is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable."),(0,l.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"success")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This guide will create a VPN from a core node behind a firewall to a relay node with Wireguard listening on the default port 51820. We will then control traffic between the connected interfaces with UFW."),(0,l.kt)("p",{parentName:"div"},"Feel free to use a different port!"))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/pirate/wireguard-docs"},"WireGuard Documentation")),(0,l.kt)("h3",{id:"install-wireguard"},"Install Wireguard"),(0,l.kt)("p",null,"Do this on both machines."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt install wireguard\n")),(0,l.kt)("p",null,"Become root."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo su\n")),(0,l.kt)("p",null,"Enter the Wireguard folder and set permissions for any new files created to root only."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd /etc/wireguard\numask 077\n")),(0,l.kt)("h4",{id:"configure"},"Configure"),(0,l.kt)("p",null,"Generate key pairs on each machine."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"C1",label:"C1",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"wg genkey | tee C1-privkey | wg pubkey > C1-pubkey\n"))),(0,l.kt)(o.Z,{value:"R1",label:"R1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"wg genkey | tee R1-privkey | wg pubkey > R1-pubkey\n")))),(0,l.kt)("p",null,"Create a Wireguard configuration file on both machines."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano /etc/wireguard/wg0.conf\n")),(0,l.kt)("p",null,"Use cat to print out the key values. Public keys are then used in the other machines conf file."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"C1",label:"C1",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cat C1-privkey\ncat C1-pubkey\n"))),(0,l.kt)(o.Z,{value:"R1",label:"R1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cat R1-privkey\ncat R1-pubkey\n")))),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"C1",label:"C1",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'[Interface]\nAddress = 10.220.0.1/32\nSaveConfig = true\nListenPort = 51820\nPostUp = wg set %i private-key <path to private key>\n##PostUp = resolvectl domain %i "~."; resolvectl dns %i 10.220.0.2; resolvectl dnssec %i yes\n\n[Peer]\nPublicKey = <result of cat R1-pubkey>\nAllowedIPs = 10.220.0.2/32\nEndpoint = <R1 nodes public ip or hostname>:51820\nPersistentKeepalive = 21\n'))),(0,l.kt)(o.Z,{value:"R1",label:"R1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"[Interface]\nAddress = 10.220.0.2/32\nSaveConfig = true\nListenPort = 51820\nPostUp = wg set %i private-key <path to private key>\n\n[Peer]\nPublicKey = <result of cat C1-pubkey>\nAllowedIPs = 10.220.0.1/32\n#Endpoint = endpoint is not needed on the listening side\nPersistentKeepalive = 21\n"))),(0,l.kt)(o.Z,{value:"Example",label:"Example",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"[Interface]\nAddress = 10.220.0.1/32\nSaveConfig = true\nListenPort = 51820\nPostUp = wg set %i private-key /etc/wireguard/C1-privkey\n\n[Peer]\nPublicKey = FnXP9t17JXTCf3kyuTBh/z83NeJsE8Ar2HtOCy2VPyw=\nAllowedIPs = 10.220.0.2/32\nEndpoint = r1.armada-alliance.com:51820\nPersistentKeepalive = 21\n")))),(0,l.kt)("h4",{id:"wg-quick"},(0,l.kt)("a",{parentName:"h4",href:"https://manpages.debian.org/unstable/wireguard-tools/wg-quick.8.en.html"},"wg-quick")),(0,l.kt)("p",null,"Use wg-quick to create the interface & manage Wireguard as a Systemd service on both machines"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"wg-quick up wg0\n")),(0,l.kt)("p",null,"Useful commands."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo wg show # metrics on the interface\nip a # should see a wg0 interface\n")),(0,l.kt)("p",null,"Once both interfaces are up you can try and ping each other."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"C1",label:"C1",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"ping 10.220.0.2\n"))),(0,l.kt)(o.Z,{value:"R1",label:"R1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"ping 10.220.0.1\n")))),(0,l.kt)("p",null,"If they are connected bring them down and back up with Systemd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"wg-quick down wg0\nsudo systemctl start wg-quick@wg0\n")),(0,l.kt)("p",null,"Enable the Wireguard service on both machines to automatically start on boot."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl enable wg-quick@wg0\nsudo systemctl status wg-quick@wg0\n")),(0,l.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"SaveConfig saves the loaded wg0.conf file in runtime and overwrites the file when it stops. Therefore you must stop the wg-quick@wg0 service before editing the configuration file or your changes will be overwritten when you try to restart the service or reboot the server."))),(0,l.kt)("p",null,"Like so"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"# become root\nsudo su\n# stop the service\nsystemctl stop wg-quick@wg0\n# edit the configuration file\nnano /etc/wireguard/wg0.conf\n# start the service\nsystemctl start wg-quick@wg0\n")),(0,l.kt)("p",null,"There is a shortcut you can use instead of the steps above if you are adding or updating peers. The following will reload the config file without affecting peer connections:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo wg syncconf wg0 <(wg-quick strip wg0)\n")),(0,l.kt)("h4",{id:"topology"},"Topology"),(0,l.kt)("p",null,"You can now update your C1 & R1 topology files so they point 10.220.0.2 & 10.220.0.1 respectively through the Wireguard VPN."),(0,l.kt)("h4",{id:"prometheus"},"Prometheus"),(0,l.kt)("p",null,"Likewise update IPv4 address' in /etc/prometheus/prometheus.yml to use the VPN."),(0,l.kt)("h3",{id:"ufw"},"UFW"),(0,l.kt)("p",null,"Control traffic through the VPN. The following allows for Prometheus/Grafana on C1 to scrape metrics from node-exporter on R1."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"C1",label:"C1",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# allow ssh access on lan behind router\nsudo ufw allow 22\n# deny ssh access from R1 to C1\nsudo ufw deny in on wg0 to any port 22 proto tcp\n# cardano-node port\nsudo ufw allow 3000\n"))),(0,l.kt)(o.Z,{value:"R1",label:"R1",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# allow ssh access\nsudo ufw allow 22\n# wireguard service\nsudo ufw allow 51820/udp\n# cardano-node port\nsudo ufw allow 3001\n# allow prometheus on C1 to scrape exporter metrics on R1\nsudo ufw allow in on wg0 to any port 12798 proto tcp\nsudo ufw allow in on wg0 to any port 9090 proto tcp\n")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Bring up ufw")),(0,l.kt)("p",null,"When you're sure you are not going to lock yourself out and that all the ports for your pool that need to be open are open you can bring up the firewall. Don't forget 80 & 443 if you have nginx proxying Grafana."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ufw enable\n# view rules\nsudo ufw status numbered\n")),(0,l.kt)("p",null,"Notes & links/To Do"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'PostUp = resolvectl domain %i "~."; resolvectl dns %i 192.0.2.1; resolvectl dnssec %i yes\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"PostUp = wg set %i private-key /etc/wireguard/wg0.key <(cat /some/path/%i/privkey)\n")))}f.isMDXComponent=!0}}]);