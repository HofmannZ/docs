"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[9089],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(a),h=r,u=c["".concat(l,".").concat(h)]||c[h]||m[h]||o;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},7799:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return m}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],s={},l="Environment Setup",d={unversionedId:"cardano-developer-guides/raspi-node/environment-setup",id:"cardano-developer-guides/raspi-node/environment-setup",title:"Environment Setup",description:"Instalar paquetes",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/cardano-developer-guides/raspi-node/environment-setup.md",sourceDirName:"cardano-developer-guides/raspi-node",slug:"/cardano-developer-guides/raspi-node/environment-setup",permalink:"/armada-alliance-docusaurus/es/docs/cardano-developer-guides/raspi-node/environment-setup",editUrl:"https://github.com/rekuenkdr/armada-alliance-docusaurus/edit/master/docs/cardano-developer-guides/raspi-node/environment-setup.md",tags:[],version:"current",frontMatter:{}},p={},m=[{value:"Instalar paquetes",id:"instalar-paquetes",level:2},{value:"Environment",id:"environment",level:2},{value:"Create bash variables &amp; add ~/.local/bin to our $PATH \ud83c\udfc3",id:"create-bash-variables--add-localbin-to-our-path-",level:3},{value:"Retrieve node files",id:"retrieve-node-files",level:3},{value:"gLiveView.sh",id:"gliveviewsh",level:3},{value:"Prometheus, Node Exporter &amp; Grafana",id:"prometheus-node-exporter--grafana",level:2},{value:"Configure Prometheus",id:"configure-prometheus",level:3},{value:"Configure Grafana",id:"configure-grafana",level:3}],c={toc:m};function h(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"environment-setup"},"Environment Setup"),(0,o.kt)("p",null,(0,o.kt)("img",{src:a(51).Z,width:"620",height:"349"})),(0,o.kt)("h2",{id:"instalar-paquetes"},"Instalar paquetes"),(0,o.kt)("p",null,"Install the packages we will need."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt install build-essential libssl-dev tcptraceroute python3-pip \\\n         jq make automake unzip net-tools nginx ssl-cert pkg-config \\\n         libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev \\\n         zlib1g-dev g++ libncursesw5 libtool autoconf -y\n")),(0,o.kt)("h2",{id:"environment"},"Environment"),(0,o.kt)("p",null,"Make some directories."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mkdir -p $HOME/.local/bin\nmkdir -p $HOME/pi-pool/files\nmkdir -p $HOME/pi-pool/scripts\nmkdir -p $HOME/pi-pool/logs\nmkdir $HOME/git\nmkdir $HOME/tmp\n")),(0,o.kt)("h3",{id:"create-bash-variables--add-localbin-to-our-path-"},"Create bash variables & add ","~","/.local/bin to our $PATH \ud83c\udfc3"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),(0,o.kt)("a",{parentName:"h5",href:"https://askubuntu.com/questions/247738/why-is-etc-profile-not-invoked-for-non-login-shells/247769#247769"},"Environment Variables in Linux/Unix"),". :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"})),(0,o.kt)("p",null,'{% tabs %}\n{% tab title="Testnet" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'echo PATH="$HOME/.local/bin:$PATH" >> $HOME/.bashrc\necho export NODE_HOME=$HOME/pi-pool >> $HOME/.bashrc\necho export NODE_CONFIG=testnet >> $HOME/.bashrc\necho export NODE_FILES=$HOME/pi-pool/files >> $HOME/.bashrc\necho export NODE_BUILD_NUM=$(curl https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/index.html | grep -e "build" | sed \'s/.*build\\/\\([0-9]*\\)\\/download.*/\\1/g\') >> $HOME/.bashrc\necho export CARDANO_NODE_SOCKET_PATH="$HOME/pi-pool/db/socket" >> $HOME/.bashrc\nsource $HOME/.bashrc\n')),(0,o.kt)("p",null,"{% endtab %}"),(0,o.kt)("p",null,'{% tab title="Mainnet" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'echo PATH="$HOME/.local/bin:$PATH" >> $HOME/.bashrc\necho export NODE_HOME=$HOME/pi-pool >> $HOME/.bashrc\necho export NODE_CONFIG=mainnet >> $HOME/.bashrc\necho export NODE_FILES=$HOME/pi-pool/files >> $HOME/.bashrc\necho export NODE_BUILD_NUM=$(curl https://hydra.iohk.io/job/Cardano/iohk-nix/cardano-deployment/latest-finished/download/1/index.html | grep -e "build" | sed \'s/.*build\\/\\([0-9]*\\)\\/download.*/\\1/g\') >> $HOME/.bashrc\necho export CARDANO_NODE_SOCKET_PATH="$HOME/pi-pool/db/socket" >> $HOME/.bashrc\nsource $HOME/.bashrc\n')),(0,o.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,o.kt)("h3",{id:"retrieve-node-files"},"Retrieve node files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $NODE_FILES\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-config.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-byron-genesis.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-shelley-genesis.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-alonzo-genesis.json\nwget -N https://hydra.iohk.io/build/${NODE_BUILD_NUM}/download/1/${NODE_CONFIG}-topology.json\n")),(0,o.kt)("p",null,'Run the following to modify testnet-config.json and update TraceBlockFetchDecisions to "true"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sed -i ${NODE_CONFIG}-config.json \\\n    -e "s/TraceBlockFetchDecisions\\": false/TraceBlockFetchDecisions\\": true/g"\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),(0,o.kt)("strong",{parentName:"h5"},"Tip for relay nodes"),': It\'s possible to reduce memory and cpu usage by setting "TraceMemPool" to "false" in ',(0,o.kt)("strong",{parentName:"h5"},"mainnet-config.json.")," This will turn off mempool data in Grafana and gLiveView.sh. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("h3",{parentName:"div",id:"retrieve-aarch64-binaries"},"Retrieve aarch64 binaries"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cd $HOME/tmp\nwget -O cardano_node_$(date +"%m-%d-%y").zip https://ci.zw3rk.com/build/1771/download/1/aarch64-unknown-linux-musl-cardano-node-1.30.1.zip\nunzip *.zip\nmv cardano-node/* $HOME/.local/bin\nrm -r cardano*\ncd $HOME\n')),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"If binaries already exist you will have to confirm overwriting the old ones. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Confirm binaries are in ada $PATH."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-node version\ncardano-cli version\n")),(0,o.kt)("h3",{parentName:"div",id:"systemd-unit-files"},"Systemd unit files"),(0,o.kt)("p",{parentName:"div"},"Let us now create the systemd unit file and startup script so systemd can manage cardano-node."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano $HOME/.local/bin/cardano-service\n")),(0,o.kt)("p",{parentName:"div"},"Paste the following, save & exit."),(0,o.kt)("p",{parentName:"div"},'{% tabs %}\n{% tab title="Testnet" %}'),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"#!/bin/bash\nDIRECTORY=/home/ada/pi-pool\nFILES=/home/ada/pi-pool/files\nPORT=3003\nHOSTADDR=0.0.0.0\nTOPOLOGY=${FILES}/testnet-topology.json\nDB_PATH=${DIRECTORY}/db\nSOCKET_PATH=${DIRECTORY}/db/socket\nCONFIG=${FILES}/testnet-config.json\n## +RTS -N4 -RTS = Multicore(4)\ncardano-node +RTS -N4 --disable-delayed-os-memory-return -qg -qb -c -RTS run \\\n  --topology ${TOPOLOGY} \\\n  --database-path ${DB_PATH} \\\n  --socket-path ${SOCKET_PATH} \\\n  --host-addr ${HOSTADDR} \\\n  --port ${PORT} \\\n  --config ${CONFIG}\n")),(0,o.kt)("p",{parentName:"div"},"{% endtab %}"),(0,o.kt)("p",{parentName:"div"},'{% tab title="Mainnet" %}'),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"#!/bin/bash\nDIRECTORY=/home/ada/pi-pool\nFILES=/home/ada/pi-pool/files\nPORT=3003\nHOSTADDR=0.0.0.0\nTOPOLOGY=${FILES}/mainnet-topology.json\nDB_PATH=${DIRECTORY}/db\nSOCKET_PATH=${DIRECTORY}/db/socket\nCONFIG=${FILES}/mainnet-config.json\n## +RTS -N4 -RTS = Multicore(4)\ncardano-node +RTS -N4 --disable-delayed-os-memory-return -qg -qb -c -RTS run \\\n  --topology ${TOPOLOGY} \\\n  --database-path ${DB_PATH} \\\n  --socket-path ${SOCKET_PATH} \\\n  --host-addr ${HOSTADDR} \\\n  --port ${PORT} \\\n  --config ${CONFIG}\n")),(0,o.kt)("p",{parentName:"div"},"{% endtab %}\n{% endtabs %}"),(0,o.kt)("p",{parentName:"div"},"Allow execution of our new startup script."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x $HOME/.local/bin/cardano-service\n")),(0,o.kt)("p",{parentName:"div"},"Open /etc/systemd/system/cardano-node.service."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nano /etc/systemd/system/cardano-node.service\n")),(0,o.kt)("p",{parentName:"div"},"Paste the following, save & exit."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'# The Cardano Node Service (part of systemd)\n# file: /etc/systemd/system/cardano-node.service\n\n[Unit]\nDescription     = Cardano node service\nWants           = network-online.target\nAfter           = network-online.target\n\n[Service]\nUser            = ada\nType            = simple\nWorkingDirectory= /home/ada/pi-pool\nExecStart       = /bin/bash -c "PATH=/home/ada/.local/bin:$PATH exec /home/ada/.local/bin/cardano-service"\nKillSignal=SIGINT\nRestartKillSignal=SIGINT\nTimeoutStopSec=3\nLimitNOFILE=32768\nRestart=always\nRestartSec=5\n#EnvironmentFile=-/home/ada/.pienv\n\n[Install]\nWantedBy= multi-user.target\n')),(0,o.kt)("p",{parentName:"div"},"Set permissions and reload systemd so it picks up our new service file.."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl daemon-reload\n")),(0,o.kt)("p",{parentName:"div"},"Let's add a function to the bottom of our .bashrc file to make life a little easier."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano $HOME/.bashrc\n")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cardano-service() {\n    #do things with parameters like $1 such as\n    sudo systemctl "$1" cardano-node.service\n}\n')),(0,o.kt)("p",{parentName:"div"},"Save & exit."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"source $HOME/.bashrc\n")),(0,o.kt)("p",{parentName:"div"},"What we just did there was add a function to control our cardano-service without having to type out"),(0,o.kt)("blockquote",{parentName:"div"},(0,o.kt)("blockquote",{parentName:"blockquote"},(0,o.kt)("p",{parentName:"blockquote"},"sudo systemctl enable cardano-node.service sudo systemctl start cardano-node.service sudo systemctl stop cardano-node.service sudo systemctl status cardano-node.service"))),(0,o.kt)("p",{parentName:"div"},"Now we just have to:"),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"cardano-service enable (enables cardano-node.service auto start at boot)"),(0,o.kt)("li",{parentName:"ul"},"cardano-service start (starts cardano-node.service)"),(0,o.kt)("li",{parentName:"ul"},"cardano-service stop (stops cardano-node.service)"),(0,o.kt)("li",{parentName:"ul"},"cardano-service status (shows the status of cardano-node.service)")),(0,o.kt)("h2",{parentName:"div",id:"-syncing-the-chain-"},"\u26d3 Syncing the chain \u26d3"),(0,o.kt)("p",{parentName:"div"},"You are now ready to start cardano-node. Doing so will start the process of 'syncing the chain'. This is going to take about 30 hours and the db folder is about 8.5GB in size right now. We used to have to sync it to one node and copy it from that node to our new ones to save time."),(0,o.kt)("h3",{parentName:"div",id:"download-snapshot"},"Download snapshot"))),(0,o.kt)("p",null,"I have started taking snapshots of my backup nodes db folder and hosting it in a web directory. With this service it takes around 15 minutes to pull the latest snapshot and maybe another 30 minutes to sync up to the tip of the chain. This service is provided as is. It is up to you. If you want to sync the chain on your own simply:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-service enable\ncardano-service start\ncardano-service status\n")),(0,o.kt)("p",null,"Otherwise, be sure your node is ",(0,o.kt)("strong",{parentName:"p"},"not")," running & delete the db folder if it exists and download db."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-service stop\ncd $NODE_HOME\nrm -r db/\n")),(0,o.kt)("p",null,"Download the DB snapshot."),(0,o.kt)("p",null,'{% tabs %}\n{% tab title="Testnet" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'wget -r -np -nH -R "index.html*" -e robots=off https://testnet.adamantium.online/db/\n')),(0,o.kt)("p",null,"{% endtab %}"),(0,o.kt)("p",null,'{% tab title="Mainnet" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'wget -r -np -nH -R "index.html*" -e robots=off https://mainnet.adamantium.online/db/\n')),(0,o.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,o.kt)("p",null,"Once wget completes enable & start cardano-node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-service enable\ncardano-service start\ncardano-service status\n")),(0,o.kt)("h3",{id:"gliveviewsh"},"gLiveView.sh"),(0,o.kt)("p",null,"Guild operators scripts have a couple of useful tools for operating a pool. We do not want the project as a whole, though there are a couple of scripts we are going to use."),(0,o.kt)("p",null,'{% embed url="',(0,o.kt)("a",{parentName:"p",href:"https://github.com/cardano-community/guild-operators/tree/master/scripts/cnode-helper-scripts%22"},'https://github.com/cardano-community/guild-operators/tree/master/scripts/cnode-helper-scripts"')," %}"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $NODE_HOME/scripts\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/env\nwget https://raw.githubusercontent.com/cardano-community/guild-operators/master/scripts/cnode-helper-scripts/gLiveView.sh\n")),(0,o.kt)("p",null,"We have to edit the env file to work with our environment. The port number here will have to be updated to match the port cardano-node is running on. For the ",(0,o.kt)("strong",{parentName:"p"},"Pi-Node")," it's port 3003. As we build the pool we will work down. For example Pi-Relay(2) will run on port 3002, Pi-Relay(1) on 3001 and Pi-Core on port 3000."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"You can change the port cardano-node runs on in /home/ada/.local/bin/cardano-service. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sed -i env \\\n    -e "s/\\#CNODE_HOME=\\"\\/opt\\/cardano\\/cnode\\"/CNODE_HOME=\\"\\home\\/ada\\/pi-pool\\"/g" \\\n    -e "s/"6000"/"3001"/g" \\\n    -e "s/\\#CONFIG=\\"\\${CNODE_HOME}\\/files\\/config.json\\"/CONFIG=\\"\\${NODE_FILES}\\/${NODE_CONFIG}-config.json\\"/g" \\\n    -e "s/\\#SOCKET=\\"\\${CNODE_HOME}\\/sockets\\/node0.socket\\"/SOCKET=\\"\\${NODE_HOME}\\/db\\/socket\\"/g"\n')),(0,o.kt)("p",{parentName:"div"},"Allow execution of gLiveView.sh."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x gLiveView.sh\n")),(0,o.kt)("h3",{parentName:"div",id:"topologyupdatersh"},"topologyUpdater.sh"),(0,o.kt)("p",{parentName:"div"},"Until peer to peer is enabled on the network operators need a way to get a list of relays/peers to connect to. The topology updater service runs in the background with cron. Every hour the script will run and tell the service you are a relay and want to be a part of the network. It will add your relay to it's directory after four hours and start generating a list of relays in a json file in the $NODE","_","HOME/logs directory. A second script, relay-topology","_","pull.sh can then be used manually to generate a mainnet-topolgy file with relays/peers that are aware of you and you of them."))),(0,o.kt)("p",null,"Open a file named topologyUpdater.sh"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $NODE_HOME/scripts\nnano topologyUpdater.sh\n")),(0,o.kt)("p",null,"Paste in the following, save & exit."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"The port number here must match the port cardano-node is running on. If you are using dns records you can add the FQDN that matches on line 6(line 6 only). Leave it as is if you are not using dns. The service will pick up the public IP and use that. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"})),(0,o.kt)("p",null,'{% tabs %}\n{% tab title="Testnet" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'#!/bin/bash\n# shellcheck disable=SC2086,SC2034\n\nUSERNAME=ada\nCNODE_PORT=3003 # must match your relay node port as set in the startup command\nCNODE_HOSTNAME="CHANGE ME"  # optional. must resolve to the IP you are requesting from\nCNODE_BIN="/home/ada/.local/bin"\nCNODE_HOME="/home/ada/pi-pool"\nLOG_DIR="${CNODE_HOME}/logs"\nGENESIS_JSON="${CNODE_HOME}/files/testnet-shelley-genesis.json"\nNETWORKID=$(jq -r .networkId $GENESIS_JSON)\nCNODE_VALENCY=1   # optional for multi-IP hostnames\nNWMAGIC=$(jq -r .networkMagic < $GENESIS_JSON)\n[[ "${NETWORKID}" = "Mainnet" ]] && HASH_IDENTIFIER="--mainnet" || HASH_IDENTIFIER="--testnet-magic ${NWMAGIC}"\n[[ "${NWMAGIC}" = "1097911063" ]] && NETWORK_IDENTIFIER="--mainnet" || NETWORK_IDENTIFIER="--testnet-magic ${NWMAGIC}"\n\nexport PATH="${CNODE_BIN}:${PATH}"\nexport CARDANO_NODE_SOCKET_PATH="${CNODE_HOME}/db/socket"\n\nblockNo=$(/home/ada/.local/bin/cardano-cli query tip ${NETWORK_IDENTIFIER} | jq -r .block )\n\n# Note:\n# if you run your node in IPv4/IPv6 dual stack network configuration and want announced the\n# IPv4 address only please add the -4 parameter to the curl command below  (curl -4 -s ...)\nif [ "${CNODE_HOSTNAME}" != "CHANGE ME" ]; then\n  T_HOSTNAME="&hostname=${CNODE_HOSTNAME}"\nelse\n  T_HOSTNAME=\'\'\nfi\n\nif [ ! -d ${LOG_DIR} ]; then\n  mkdir -p ${LOG_DIR};\nfi\n\ncurl -s -f -4 "https://api.clio.one/htopology/v1/?port=${CNODE_PORT}&blockNo=${blockNo}&valency=${CNODE_VALENCY}&magic=${NWMAGIC}${T_HOSTNAME}" | tee -a "${LOG_DIR}"/topologyUpdater_lastresult.json\n')),(0,o.kt)("p",null,"{% endtab %}"),(0,o.kt)("p",null,'{% tab title="Mainnet" %}'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'#!/bin/bash\n# shellcheck disable=SC2086,SC2034\n\nUSERNAME=ada\nCNODE_PORT=3003 # must match your relay node port as set in the startup command\nCNODE_HOSTNAME="CHANGE ME"  # optional. must resolve to the IP you are requesting from\nCNODE_BIN="/home/ada/.local/bin"\nCNODE_HOME="/home/ada/pi-pool"\nLOG_DIR="${CNODE_HOME}/logs"\nGENESIS_JSON="${CNODE_HOME}/files/mainnet-shelley-genesis.json"\nNETWORKID=$(jq -r .networkId $GENESIS_JSON)\nCNODE_VALENCY=1   # optional for multi-IP hostnames\nNWMAGIC=$(jq -r .networkMagic < $GENESIS_JSON)\n[[ "${NETWORKID}" = "Mainnet" ]] && HASH_IDENTIFIER="--mainnet" || HASH_IDENTIFIER="--testnet-magic ${NWMAGIC}"\n[[ "${NWMAGIC}" = "764824073" ]] && NETWORK_IDENTIFIER="--mainnet" || NETWORK_IDENTIFIER="--testnet-magic ${NWMAGIC}"\n\nexport PATH="${CNODE_BIN}:${PATH}"\nexport CARDANO_NODE_SOCKET_PATH="${CNODE_HOME}/db/socket"\n\nblockNo=$(/home/ada/.local/bin/cardano-cli query tip ${NETWORK_IDENTIFIER} | jq -r .block )\n\n# Note:\n# if you run your node in IPv4/IPv6 dual stack network configuration and want announced the\n# IPv4 address only please add the -4 parameter to the curl command below  (curl -4 -s ...)\nif [ "${CNODE_HOSTNAME}" != "CHANGE ME" ]; then\n  T_HOSTNAME="&hostname=${CNODE_HOSTNAME}"\nelse\n  T_HOSTNAME=\'\'\nfi\n\nif [ ! -d ${LOG_DIR} ]; then\n  mkdir -p ${LOG_DIR};\nfi\n\ncurl -s -f -4 "https://api.clio.one/htopology/v1/?port=${CNODE_PORT}&blockNo=${blockNo}&valency=${CNODE_VALENCY}&magic=${NWMAGIC}${T_HOSTNAME}" | tee -a "${LOG_DIR}"/topologyUpdater_lastresult.json\n')),(0,o.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,o.kt)("p",null,"Save, exit, and make it executable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x topologyUpdater.sh\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"You will not be able to successfully execute ./topologyUpdater.sh until you are fully synced up to the tip of the chain. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"})),(0,o.kt)("p",null,"Create a cron job that will run the script every hour."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"crontab -e\n")),(0,o.kt)("p",null,"Add the following to the bottom, save & exit."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"The Pi-Node image has this cron entry disabled by default. You can enable it by removing the #. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"33 * * * * /home/ada/pi-pool/scripts/topologyUpdater.sh\n")),(0,o.kt)("p",{parentName:"div"},"After 4 hours of on boarding you will be added to the service and can pull your new list of peers into the mainnet-topology file."),(0,o.kt)("p",{parentName:"div"},"Create another file relay-topology","_","pull.sh and paste in the following."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano relay-topology_pull.sh\n")),(0,o.kt)("p",{parentName:"div"},'{% tabs %}\n{% tab title="Testnet" %}'),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'#!/bin/bash\nBLOCKPRODUCING_IP=<BLOCK PRODUCERS PRIVATE IP>\nBLOCKPRODUCING_PORT=3000\ncurl -4 -s -o /home/ada/pi-pool/files/testnet-topology.json "https://api.clio.one/htopology/v1/fetch/?max=15&magic=1097911063&customPeers=${BLOCKPRODUCING_IP}:${BLOCKPRODUCING_PORT}:1"\n')),(0,o.kt)("p",{parentName:"div"},"{% endtab %}"),(0,o.kt)("p",{parentName:"div"},'{% tab title="Mainnet" %}'),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'#!/bin/bash\nBLOCKPRODUCING_IP=<BLOCK PRODUCERS PRIVATE IP>\nBLOCKPRODUCING_PORT=3000\ncurl -4 -s -o /home/ada/pi-pool/files/mainnet-topology.json "https://api.clio.one/htopology/v1/fetch/?max=15&magic=764824073&customPeers=${BLOCKPRODUCING_IP}:${BLOCKPRODUCING_PORT}:1"\n')),(0,o.kt)("p",{parentName:"div"},"{% endtab %}\n{% endtabs %}"),(0,o.kt)("p",{parentName:"div"},"Save, exit and make it executable."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"chmod +x relay-topology_pull.sh\n")))),(0,o.kt)("p",null,"After 4 hours you can pull in your new list and restart the cardano-service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $NODE_HOME/scripts\n./relay-topology_pull.sh\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"relay-topology","_","pull.sh will add 15 peers to your mainnet-topology file. I usually remove the furthest 5 relays and use the closest 10. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"nano $NODE_FILES/${NODE_CONFIG}-topology.json\n")))),(0,o.kt)("p",null,"Changes to this file will take affect upon restarting the cardano-service."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Don't forget to remove the last comma in your topology file! :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Status should show as enabled & running."),(0,o.kt)("p",{parentName:"div"},"Once your node syncs past epoch 208(shelley era) you can use gLiveView.sh to monitor."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $NODE_HOME/scripts\n./gLiveView.sh\n")),(0,o.kt)("p",null,(0,o.kt)("img",{src:a(9560).Z,width:"463",height:"285"})),(0,o.kt)("h2",{id:"prometheus-node-exporter--grafana"},"Prometheus, Node Exporter & Grafana"),(0,o.kt)("p",null,"Prometheus connects to cardano-nodes backend and serves metrics over http. Grafana in turn can use that data to display graphs and create alerts. Our Grafana dashboard will be made up of data from our Ubuntu system & cardano-node. Grafana can display data from other sources as well, like ",(0,o.kt)("a",{parentName:"p",href:"https://adapools.org"},"adapools.org"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"You can connect a Telegram bot to Grafana which can alert you of problems with the server. Much easier than trying to configure email alerts. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'{% embed url="',(0,o.kt)("a",{parentName:"p",href:"https://github.com/prometheus%22"},'https://github.com/prometheus"')," %}"),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{src:a(1202).Z,width:"1907",height:"980"})),(0,o.kt)("h3",{parentName:"div",id:"install-prometheus--node-exporter"},"Install Prometheus & Node Exporter."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt-get install -y prometheus prometheus-node-exporter\n")),(0,o.kt)("p",null,"Disable them in systemd for now."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl disable prometheus.service\nsudo systemctl disable prometheus-node-exporter.service\n")),(0,o.kt)("h3",{id:"configure-prometheus"},"Configure Prometheus"),(0,o.kt)("p",null,"Open prometheus.yml."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nano /etc/prometheus/prometheus.yml\n")),(0,o.kt)("p",null,"Replace the contents of the file with."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Indentation must be correct YAML format or Prometheus will fail to start. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"global:\n  scrape_interval:     15s # By default, scrape targets every 15 seconds.\n\n  # Attach these labels to any time series or alerts when communicating with\n  # external systems (federation, remote storage, Alertmanager).\n  external_labels:\n    monitor: 'codelab-monitor'\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label job=<job_name> to any timeseries scraped from this config.\n  - job_name: 'Prometheus' # To scrape data from the cardano node\n    scrape_interval: 5s\n    static_configs:\n#      - targets: ['<CORE PRIVATE IP>:12798']\n#        labels:\n#          alias: 'C1'\n#          type:  'cardano-node'\n#      - targets: ['<RELAY PRIVATE IP>:12798']\n#        labels:\n#          alias: 'R1'\n#          type:  'cardano-node'\n      - targets: ['localhost:12798']\n        labels:\n          alias: 'N1'\n          type:  'cardano-node'\n\n#      - targets: ['<CORE PRIVATE IP>:9100']\n#        labels:\n#          alias: 'C1'\n#          type:  'node'\n#      - targets: ['<RELAY PRIVATE IP>:9100']\n#        labels:\n#          alias: 'R1'\n#          type:  'node'\n      - targets: ['localhost:9100']\n        labels:\n          alias: 'N1'\n          type:  'node'\n")),(0,o.kt)("p",{parentName:"div"},"Save & exit."),(0,o.kt)("p",{parentName:"div"},"Edit mainnet-config.json so cardano-node exports traces on all interfaces."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cd $NODE_FILES\nsed -i ${NODE_CONFIG}-config.json -e "s/127.0.0.1/0.0.0.0/g"\n')),(0,o.kt)("h3",{parentName:"div",id:"install-grafana"},"Install Grafana"),(0,o.kt)("p",{parentName:"div"},'{% embed url="',(0,o.kt)("a",{parentName:"p",href:"https://github.com/grafana/grafana%22"},'https://github.com/grafana/grafana"')," %}"),(0,o.kt)("p",{parentName:"div"},"Add Grafana's gpg key to Ubuntu."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n")),(0,o.kt)("p",{parentName:"div"},"Add latest stable repo to apt sources."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list\n')),(0,o.kt)("p",{parentName:"div"},"Update your package lists & install Grafana."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt update\nsudo apt install grafana\n")),(0,o.kt)("p",{parentName:"div"},"Change the port Grafana listens on so it does not clash with cardano-node."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'sudo sed -i /etc/grafana/grafana.ini \\\n-e "s/;http_port/http_port/" \\\n-e "s/3000/5000/"\n')),(0,o.kt)("h3",{parentName:"div",id:"cardano-monitor-bash-function"},"cardano-monitor bash function"),(0,o.kt)("p",{parentName:"div"},"Open .bashrc."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $HOME\nnano .bashrc\n")),(0,o.kt)("p",{parentName:"div"},"Down at the bottom add."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'cardano-monitor() {\n    #do things with parameters like $1 such as\n    sudo systemctl "$1" prometheus.service\n    sudo systemctl "$1" prometheus-node-exporter.service\n    sudo systemctl "$1" grafana-server.service\n}\n')),(0,o.kt)("p",{parentName:"div"},"Save, exit & source."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"source .bashrc\n")),(0,o.kt)("p",{parentName:"div"},"Here we tied all three services under one function. Enable Prometheus.service, prometheus-node-exporter.service & grafana-server.service to run on boot and start the services."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-monitor enable\ncardano-monitor start\n")))),(0,o.kt)("h3",{id:"configure-grafana"},"Configure Grafana"),(0,o.kt)("p",null,"On your local machine open your browser and got to ","[","http://\\<Pi-Node's]","(","http://\\<Pi-Node's) private ip>:5000"),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Do not change the default password yet, there is no encryption on the wire. Choose skip when it asks. The next time we visit Grafana it will be with a self signed TLS certificate handled by Nginx webservers proxy","_","pass and your passwords will be safe from anything listening on your internal network. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Log in and set a new password. Default username and password is ",(0,o.kt)("strong",{parentName:"p"},"admin:admin"),"."),(0,o.kt)("h3",{parentName:"div",id:"configure-data-source"},(0,o.kt)("strong",{parentName:"h3"},"Configure data source")),(0,o.kt)("p",{parentName:"div"},"In the left hand vertical menu go to ",(0,o.kt)("strong",{parentName:"p"},"Configure")," > ",(0,o.kt)("strong",{parentName:"p"},"Datasources")," and click to ",(0,o.kt)("strong",{parentName:"p"},"Add data source"),". Choose Prometheus. Enter ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:9090"},"http://localhost:9090"),' where it is grayed out, everything can be left default. At the bottom save & test. You should get the green "Data source is working" if cardano-monitor has been started. If for some reason those services failed to start issue ',(0,o.kt)("strong",{parentName:"p"},"cardano-service restart"),"."),(0,o.kt)("h3",{parentName:"div",id:"import-dashboards"},(0,o.kt)("strong",{parentName:"h3"},"Import dashboards")),(0,o.kt)("p",{parentName:"div"},"Save the dashboard json files to your local machine."),(0,o.kt)("p",{parentName:"div"},'{% embed url="',(0,o.kt)("a",{parentName:"p",href:"https://github.com/armada-alliance/dashboards%22"},'https://github.com/armada-alliance/dashboards"')," %}"),(0,o.kt)("p",{parentName:"div"},"In the left hand vertical menu go to ",(0,o.kt)("strong",{parentName:"p"},"Dashboards")," > ",(0,o.kt)("strong",{parentName:"p"},"Manage")," and click on ",(0,o.kt)("strong",{parentName:"p"},"Import"),". Select the file you just downloaded/created and save. Head back to ",(0,o.kt)("strong",{parentName:"p"},"Dashboards")," > ",(0,o.kt)("strong",{parentName:"p"},"Manage")," and click on your new dashboard."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{src:a(1202).Z,width:"1907",height:"980"})),(0,o.kt)("h3",{parentName:"div",id:"configure-pooldatalive"},"Configure poolDataLive"),(0,o.kt)("p",{parentName:"div"},"Here you can use the poolData api to bring your pools data into Grafana."),(0,o.kt)("p",{parentName:"div"},'{% embed url="',(0,o.kt)("a",{parentName:"p",href:"https://api.pooldata.live/dashboard%22"},'https://api.pooldata.live/dashboard"')," %}"),(0,o.kt)("p",{parentName:"div"},"Follow the instructions to install the Grafana plugin, configure your datasource and import the dashboard."),(0,o.kt)("p",{parentName:"div"},"Follow log output to journal."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo journalctl --unit=cardano-node --follow\n")),(0,o.kt)("p",{parentName:"div"},"Follow log output to stdout."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo tail -f /var/log/syslog\n")),(0,o.kt)("h3",{parentName:"div",id:"grafana-nginx-proxy_pass--snakeoil"},"Grafana, Nginx proxy","_","pass & snakeoil"),(0,o.kt)("p",{parentName:"div"},"Let's put Grafana behind Nginx with self signed(snakeoil) certificate. The certificate was generated when we installed the ssl-cert package."),(0,o.kt)("p",{parentName:"div"},"You will get a warning from your browser. This is because ca-certificates cannot follow a trust chain to a trusted (centralized) source. The connection is however encrypted and will protect your passwords flying around in plain text."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nano /etc/nginx/sites-available/default\n")),(0,o.kt)("p",{parentName:"div"},"Replace contents of the file with below."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"# Default server configuration\n#\nserver {\n        listen 80 default_server;\n        return 301 https://$host$request_uri;\n}\n\nserver {\n        # SSL configuration\n        #\n        listen 443 ssl default_server;\n        #listen [::]:443 ssl default_server;\n        #\n        # Note: You should disable gzip for SSL traffic.\n        # See: https://bugs.debian.org/773332\n        #\n        # Read up on ssl_ciphers to ensure a secure configuration.\n        # See: https://bugs.debian.org/765782\n        #\n        # Self signed certs generated by the ssl-cert package\n        # Don't use them in a production server!\n        #\n        include snippets/snakeoil.conf;\n\n        add_header X-Proxy-Cache $upstream_cache_status;\n        location / {\n          proxy_pass http://127.0.0.1:5000;\n          proxy_redirect      off;\n          include proxy_params;\n        }\n}\n")),(0,o.kt)("p",{parentName:"div"},"Check that Nginx is happy with our changes and restart it."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo nginx -t\n## if ok do\nsudo service nginx restart\n")),(0,o.kt)("p",{parentName:"div"},"You can now visit your pi-nodes ip address without any port specification, the connection will be upgraded to SSL/TLS and you will get a scary message(not really scary at all). Continue through to your dashboard."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{src:a(1202).Z,width:"1907",height:"980"})),(0,o.kt)("p",{parentName:"div"},"From here you have a pi-node with tools to build a stake pool from the following pages. Best of Luck and please join the ",(0,o.kt)("a",{parentName:"p",href:"https://armada-alliance.com"},"armada-alliance"),", together we are stronger!"))))}h.isMDXComponent=!0},9560:function(e,t,a){t.Z=a.p+"assets/images/pi-node-glive-1e55923399447d3911e848db7c0be880.png"},1202:function(e,t,a){t.Z=a.p+"assets/images/pi-pool-grafana-55cbdd28508cd62938e7317a2e234d78.png"},51:function(e,t,a){t.Z=a.p+"assets/images/yoda-patient-7df4556f15700e6c405a7f9ee5c53d4c.jpeg"}}]);