"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[8766],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var c=2;c<s;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5833:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return d}});var a=t(7462),o=t(3366),s=(t(7294),t(3905)),i=["components"],r={description:"How to get your Stake Pools Slot Assignments for next Epoch"},l="CNCLI Leader Logs \ud83d\udcd1",c={unversionedId:"stake-pool-guides/leader-logs",id:"stake-pool-guides/leader-logs",title:"CNCLI Leader Logs \ud83d\udcd1",description:"How to get your Stake Pools Slot Assignments for next Epoch",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/stake-pool-guides/leader-logs.md",sourceDirName:"stake-pool-guides",slug:"/stake-pool-guides/leader-logs",permalink:"/armada-alliance-docusaurus/es/docs/stake-pool-guides/leader-logs",editUrl:"https://github.com/rekuenkdr/armada-alliance-docusaurus/edit/master/docs/stake-pool-guides/leader-logs.md",tags:[],version:"current",frontMatter:{description:"How to get your Stake Pools Slot Assignments for next Epoch"},sidebar:"tutorialSidebar",previous:{title:"Static Build",permalink:"/armada-alliance-docusaurus/es/docs/stake-pool-guides/updating-a-cardano-node/static-build"},next:{title:"Wireguard Guide",permalink:"/armada-alliance-docusaurus/es/docs/stake-pool-guides/wireguard-guide"}},p={},d=[{value:"Prepare Rust Environment and install Rustup",id:"prepare-rust-environment-and-install-rustup",level:3},{value:"Build cncli",id:"build-cncli",level:3},{value:"Run cncli sync and deploy it as a service",id:"run-cncli-sync-and-deploy-it-as-a-service",level:2},{value:"Create the leaderlog-stake-snapshot-v4.sh script (thanks to @sayshar)",id:"create-the-leaderlog-stake-snapshot-v4sh-script-thanks-to-sayshar",level:3},{value:"Run leaderlog script",id:"run-leaderlog-script",level:3}],u={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"cncli-leader-logs-"},"CNCLI Leader Logs \ud83d\udcd1"),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"CNCLI method still works, but before you start building, take a look at ",(0,s.kt)("a",{parentName:"h5",href:"https://github.com/asnakep/ScheduledBlocks"},"this method")," by ",(0,s.kt)("a",{parentName:"h5",href:"https://www.adasnakepool.com/"},"ADA Snake Pool"),".")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},'"Lightweight and Portable Scheduled Blocks Checker for Next, Current and Previous Epochs. No cardano-node Required, data is taken from blockfrost.io and armada-alliance.com." :::'),(0,s.kt)("h2",{parentName:"div",id:"build-cncli-thanks-to-andrewwestberg"},"Build CNCLI ","(","thanks to ",(0,s.kt)("a",{parentName:"h2",href:"https://github.com/AndrewWestberg"},"@AndrewWestberg"),")"))),(0,s.kt)("p",null,"Running it on your block-producing/Core node is the convenient way, but to save resources you may build and run cncli on another ","(","i.e. your monitoring",")"," device. Therefore you will need to get the stake-snapshot.json from one of your running nodes and copy the genesis files and the vrf.skey from your Core to the particular device.\n:::"),(0,s.kt)("h3",{id:"prepare-rust-environment-and-install-rustup"},"Prepare Rust Environment and install Rustup"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mkdir -p $HOME/.cargo/bin\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n")),(0,s.kt)("p",null,"Choose Option 1 ","(","default",")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"source $HOME/.cargo/env\n\nrustup install stable\n\nrustup default stable\n\nrustup update\n\nrustup component add clippy rustfmt\n")),(0,s.kt)("p",null,"Install any necessary packages. Your system may already have most to all of these."),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Monitor" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt update -y && sudo apt install -y automake \\ \nbuild-essential pkg-config libffi-dev libgmp-dev \\ \nlibssl-dev libtinfo-dev libsystemd-dev zlib1g-dev \\ \nmake g++ tmux git jq wget libncursesw5 libtool autoconf\n")),(0,s.kt)("p",null,"{% endtab %}"),(0,s.kt)("p",null,'{% tab title="Core" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo apt update -y\n")),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("h3",{id:"build-cncli"},"Build cncli"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"# If you don't have a $HOME/git folder you can create one using:\n# mkdir $HOME/git\n\ncd $HOME/git\n\ngit clone --recurse-submodules https://github.com/AndrewWestberg/cncli\n\ncd cncli\n")),(0,s.kt)("p",null,"Check ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/AndrewWestberg/cncli"},"https://github.com/AndrewWestberg/cncli")," for the latest tag name and adjust the command below. For the time of writing this, it's v3.1.4"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"git checkout <latest_tag_name>\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"# This will take some time on a Raspberry Pi - be patient, it'll git r dun.\n# Grab some coffee, check the strawberries, whatever.\n\ncargo install --path . --force\n")),(0,s.kt)("p",null,"Check if the installation was successful and locate ",(0,s.kt)("inlineCode",{parentName:"p"},"cncli")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cncli --version\n\ncommand -v cncli\n\necho $PATH\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"command -v")," should show you where the ",(0,s.kt)("inlineCode",{parentName:"p"},"cncli")," executable currently lives, ",(0,s.kt)("inlineCode",{parentName:"p"},".cargo/bin"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"echo")," command will show what's on your ",(0,s.kt)("inlineCode",{parentName:"p"},"PATH"),"."),(0,s.kt)("p",null,"You should have ",(0,s.kt)("inlineCode",{parentName:"p"},".local/bin")," on your ",(0,s.kt)("inlineCode",{parentName:"p"},"PATH"),", but in case you don't ","(","Core should have it",")",", do it now and add it to your ",(0,s.kt)("inlineCode",{parentName:"p"},"PATH"),":"),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Monitor" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'mkdir -p $HOME/.local/bin\necho PATH="$HOME/.local/bin:$PATH" >> $HOME/.bashrc\nsource $HOME/.bashrc\n')),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("p",null,"Move ",(0,s.kt)("inlineCode",{parentName:"p"},"cncli")," from it's current location to ",(0,s.kt)("inlineCode",{parentName:"p"},".local/bin")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mv <path/to>/cncli $HOME/.local/bin/cncli\n")),(0,s.kt)("h2",{id:"run-cncli-sync-and-deploy-it-as-a-service"},"Run cncli sync and deploy it as a service"),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"CNCLI sync creates an sqlite3 database ","(","cncli.db",")",", and needs to be connected to your running core-node. The guide assumes you have followed the armada-alliance guide so far and use the same folder structure."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mkdir -p $HOME/pi-pool/cncli\n\nsudo nano /etc/systemd/system/cncli-sync.service\n")),(0,s.kt)("p",null,"Paste the following, adjust ip and port, save and exit."),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Monitor" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"[Unit]\nDescription=CNCLI Sync\nAfter=multi-user.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nLimitNOFILE=131072\nExecStart=/home/ada/.local/bin/cncli sync --host <your_core_ip> --port <your_core_port> --db /home/ada/pi-pool/cncli/cncli.db\nKillSignal=SIGINT\nSuccessExitStatus=143\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=cncli-sync\n\n[Install]\nWantedBy=multi-user.target\n")),(0,s.kt)("p",null,"{% endtab %}"),(0,s.kt)("p",null,'{% tab title="Core" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"[Unit]\nDescription=CNCLI Sync\nAfter=multi-user.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nLimitNOFILE=131072\nExecStart=/home/ada/.local/bin/cncli sync --host 127.0.0.1 --port <cardano_node_port> --db $HOME/pi-pool/cncli/cncli.db\nKillSignal=SIGINT\nSuccessExitStatus=143\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=cncli-sync\n\n[Install]\nWantedBy=multi-user.target\n")),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("p",null,"Enable the service"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo systemctl daemon-reload\n\nsudo systemctl enable cncli-sync.service\n\nsudo systemctl start cncli-sync.service\n")),(0,s.kt)("p",null,"Make the cncli.db writable ","(","needed for the following script",")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $HOME/pi-pool/cncli\n\nsudo chmod a+w cncli.db\n")),(0,s.kt)("h3",{id:"create-the-leaderlog-stake-snapshot-v4sh-script-thanks-to-sayshar"},"Create the leaderlog-stake-snapshot-v4.sh script ","(","thanks to ",(0,s.kt)("a",{parentName:"h3",href:"https://github.com/sayshar"},"@sayshar"),")"),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Monitor" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"    mkdir -p $HOME/pi-pool/scripts\n  sudo nano $HOME/pi-pool/scripts/leaderlog-stake-snapshot-v4.sh\n")),(0,s.kt)("p",null,"{% endtab %}"),(0,s.kt)("p",null,'{% tab title="Core" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"    sudo nano $HOME/pi-pool/scripts/leaderlog-stake-snapshot-v4.sh\n")),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("p",null,"Paste the following, adjust parameters, save and exit."),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Monitor" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'#!/bin/bash\n\n##############################################################\n###################   To be filled  ##########################\n##############################################################\n\nPOOLID="type pool ID"\n\nVRFSKEY=$HOME/pi-pool/cncli/vrf.skey\n\nBYRON=$HOME/pi-pool/cncli/mainnet-byron-genesis.json\n\nSHELLEY=$HOME/pi-pool/cncli/mainnet-shelley-genesis.json\n\nCNCLIDB=$HOME/pi-pool/cncli/cncli.db #Ensure you point to the correct folder after running cncli sync.\n\nTZ="America/Los_Angeles" #https://en.wikipedia.org/wiki/List_of_tz_database_time_zones [default: America/Los_Angeles].\n\nEPOCH="current" #prev or next for last and next epoch respectively. Default is current.\n\n##############################################################\n\n\nif [ "$EPOCH" = "current" ] || [ "$EPOCH" = "prev" ] || [ "$EPOCH" = "next" ]; then\n    if [ "$EPOCH" = "current" ]; then\n               echo ""\n                echo "Please be patient. Generating leaderlogs for the current epoch."\n            echo ""\n        POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeSet/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeSet/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "next" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the next epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeMark/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeMark/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "prev" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the previous epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeGo/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeGo/ {print $NF+0}\'`\n    fi\n    cncli leaderlog --pool-id $POOLID --pool-vrf-skey $VRFSKEY --byron-genesis $BYRON --shelley-genesis $SHELLEY --pool-stake $POOLSTAKE --active-stake $ACTIVESTAKE --db $CNCLIDB --tz $TZ --ledger-set $EPOCH > slot.json\nelse\n        echo ""\n          echo "Invalid EPOCH entry"\n        echo ""\nfi\n\nif [ -f ./slot.json ]; then\n    epoch=`cat slot.json | awk \'$1 ~ /"epoch":/ {print $NF+0}\'`\n    mv slot.json slot_$epoch.json\n    echo ""\n    echo "Previewing leaderlogs slots for epoch $epoch"\n    echo ""\n    cat slot_$epoch.json\n    echo ""    \n    if [ -f ./slot_.json ]; then\n        rm slot_.json\n    fi\n    else\n    echo ""\n    echo "Leaderlogs could not be generated. Please check parameters and try again. Also ensure system has adequate RAM if failure repeats."\n    echo ""\nfi\n')),(0,s.kt)("p",null,"{% endtab %}"),(0,s.kt)("p",null,'{% tab title="Core" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},'#!/bin/bash\n\n##############################################################\n###################   To be filled  ##########################\n##############################################################\n\nPOOLID="type pool ID"\n\nVRFSKEY=$HOME/pi-pool/vrf.skey\n\nBYRON=$HOME/pi-pool/files/mainnet-byron-genesis.json\n\nSHELLEY=$HOME/pi-pool/files/mainnet-shelley-genesis.json\n\nCNCLIDB=$HOME/pi-pool/cncli/cncli.db #Ensure you point to the correct folder after running cncli sync.\n\nTZ="America/Los_Angeles" #https://en.wikipedia.org/wiki/List_of_tz_database_time_zones [default: America/Los_Angeles].\n\nEPOCH="current" #prev or next for last and next epoch respectively. Default is current.\n\n##############################################################\n\nif [ ! -f stake-snapshot.json ];then\n    cardano-cli query stake-snapshot --stake-pool-id $POOLID --mainnet > stake-snapshot.json\n    echo ""\n    cat stake-snapshot.json\n    echo ""\nelse\n    ANS="N"\n    echo ""\n    echo "The file stake-snapshot.json is detected. Would you like to recreate it? y/N"\n    echo ""\n    read ANS\nfi\n\nif [ $ANS = "y" ] || [ $ANS = "Y" ]; then\n    echo ""\n        echo "Generating new stake-snapshot.json."\n        echo ""\n        cardano-cli query stake-snapshot --stake-pool-id $POOLID --mainnet > stake-snapshot.json\n    echo ""\n    echo "Previewing stake-snapshot.json"\n    echo ""\n        cat stake-snapshot.json\n    echo ""\nelse\n        echo ""\n        echo "Previewing stake-snapshot.json"\n    echo ""\n    cat stake-snapshot.json\n    echo ""\nfi\n\nif [ "$EPOCH" = "current" ] || [ "$EPOCH" = "prev" ] || [ "$EPOCH" = "next" ]; then\n    if [ "$EPOCH" = "current" ]; then\n               echo ""\n                echo "Please be patient. Generating leaderlogs for the current epoch."\n            echo ""\n        POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeSet/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeSet/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "next" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the next epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeMark/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeMark/ {print $NF+0}\'`\n    fi\n    if [ "$EPOCH" = "prev" ]; then\n                echo ""\n                echo "Please be patient. Generating leaderlogs for the previous epoch."\n                echo ""\n                POOLSTAKE=`cat stake-snapshot.json | awk \'$1 ~ /poolStakeGo/ {print $NF+0}\'`\n                ACTIVESTAKE=`cat stake-snapshot.json | awk \'$1 ~ /activeStakeGo/ {print $NF+0}\'`\n    fi\n    cncli leaderlog --pool-id $POOLID --pool-vrf-skey $VRFSKEY --byron-genesis $BYRON --shelley-genesis $SHELLEY --pool-stake $POOLSTAKE --active-stake $ACTIVESTAKE --db $CNCLIDB --tz $TZ --ledger-set $EPOCH > slot.json\nelse\n        echo ""\n          echo "Invalid EPOCH entry"\n        echo ""\nfi\n\nif [ -f ./slot.json ]; then\n    epoch=`cat slot.json | awk \'$1 ~ /"epoch":/ {print $NF+0}\'`\n    mv slot.json slot_$epoch.json\n    echo ""\n    echo "Previewing leaderlogs slots for epoch $epoch"\n    echo ""\n    cat slot_$epoch.json\n    echo ""    \n    if [ -f ./slot_.json ]; then\n        rm slot_.json\n    fi\n    else\n    echo ""\n    echo "Leaderlogs could not be generated. Please check parameters and try again. Also ensure system has adequate RAM if failure repeats."\n    echo ""\nfi\n')),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("p",null,"Make it executable"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"sudo chmod +x leaderlog-stake-snapshot-v4.sh\n")),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},'If you installed cncli on your Core continue with "Run leaderlog script", otherwise you have to do some more steps:'))),(0,s.kt)("p",null,"Run the following command on your Core. Make sure to add your pool id."),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Core" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cardano-cli query stake-snapshot --stake-pool-id <your_pool_id> --mainnet > stake-snapshot.json\n")),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("p",null,"Then copy ",(0,s.kt)("inlineCode",{parentName:"p"},"vrf.skey"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"mainnet-byron-genesis.json"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"mainnet-shelley-genesis.json")," ",(0,s.kt)("inlineCode",{parentName:"p"},"stake-snapshot.json")," from your Core to your cncli device. ","(","via USB-stick, scp or rsync...",")"," Move them to the right directory:"),(0,s.kt)("p",null,'{% tabs %}\n{% tab title="Monitor" %}'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"mv /path/to/vrf.skey $HOME/pi-pool/cncli/vrf.skey\nmv /path/to/mainnet-byron-genesis.json $HOME/pi-pool/cncli/mainnet-byron-genesis.json\nmv /path/to/mainnet-shelley-genesis.json $HOME/pi-pool/cncli/mainnet-shelley-genesis.json\nmv /path/to/stake-snapshot.json $HOME/pi-pool/scripts/stake-snapshot.json\n")),(0,s.kt)("p",null,"{% endtab %}\n{% endtabs %}"),(0,s.kt)("h3",{id:"run-leaderlog-script"},"Run leaderlog script"),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Every time you run the script you need a fresh stake-snapshot.json, except your stake didn't change for the last few epochs."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=">_ Terminal"',title:'">_','Terminal"':!0},"cd $HOME/pi-pool/scripts\n./leaderlog-stake-snapshot-v4.sh\n")),(0,s.kt)("p",null,"The schedule is saved to slot","_",(0,s.kt)("inlineCode",{parentName:"p"},"number-of-epoch"),".json."),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The script calculates the schedule for the current epoch by default. You can run it for the next epoch 1.5 days before. ","(","Or at 70% into the current epoch.",")",' Just change the epoch parameter in the script from "current" to "next".'))),(0,s.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Be careful to keep your block leader schedule private, as attackers could use this information to strategically attack your pool."))))}m.isMDXComponent=!0}}]);