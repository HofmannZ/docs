"use strict";(self.webpackChunkarmada_alliance_docusaurus=self.webpackChunkarmada_alliance_docusaurus||[]).push([[2345],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2361:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],s={},i="burn 13.1",p={unversionedId:"stake-pool-guides/FreeBSD",id:"stake-pool-guides/FreeBSD",title:"burn 13.1",description:"https://download.freebsd.org/ftp/snapshots/arm64/aarch64/ISO-IMAGES/13.1/FreeBSD-13.1-STABLE-arm64-aarch64-RPI-20220527-e5b204542f3-250927.img.xz",source:"@site/docs/stake-pool-guides/FreeBSD.md",sourceDirName:"stake-pool-guides",slug:"/stake-pool-guides/FreeBSD",permalink:"/docs/stake-pool-guides/FreeBSD",draft:!1,editUrl:"https://github.com/armada-alliance/docs/edit/master/docs/stake-pool-guides/FreeBSD.md",tags:[],version:"current",frontMatter:{}},c={},u=[{value:"SSH",id:"ssh",level:2},{value:"Install packages for this",id:"install-packages-for-this",level:2},{value:"Overclock",id:"overclock",level:2},{value:"dynamic cpu scaling",id:"dynamic-cpu-scaling",level:2},{value:"Swap",id:"swap",level:2},{value:"Better bash",id:"better-bash",level:2},{value:"use it",id:"use-it",level:3},{value:"Chrony",id:"chrony",level:2},{value:"Build portsnap db",id:"build-portsnap-db",level:2},{value:"Tmux",id:"tmux",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"burn-131"},"burn 13.1"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://download.freebsd.org/ftp/snapshots/arm64/aarch64/ISO-IMAGES/13.1/FreeBSD-13.1-STABLE-arm64-aarch64-RPI-20220527-e5b204542f3-250927.img.xz"},"https://download.freebsd.org/ftp/snapshots/arm64/aarch64/ISO-IMAGES/13.1/FreeBSD-13.1-STABLE-arm64-aarch64-RPI-20220527-e5b204542f3-250927.img.xz")),(0,a.kt)("h1",{id:"login"},"login"),(0,a.kt)("p",null,"root\nroot"),(0,a.kt)("p",null,"freebsd-update fetch install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pkg update\n\nadduser  # ada\n\npw group mod wheel -m ada\n")),(0,a.kt)("h2",{id:"ssh"},"SSH"),(0,a.kt)("p",null,"is listening, set password auth to yes in sshd_config."),(0,a.kt)("h2",{id:"install-packages-for-this"},"Install packages for this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pkg install sudo git nano htop bash bash-completion chrony libedit jq wget tmux\n")),(0,a.kt)("h2",{id:"overclock"},"Overclock"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo nano /boot/msdos/config.txt\n")),(0,a.kt)("p",null,"add to bottom"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"over_voltage=6\narm_freq=2000\n")),(0,a.kt)("h2",{id:"dynamic-cpu-scaling"},"dynamic cpu scaling"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'sudo nano /etc/rc.conf\n# add following\npowerd_enable="YES"\n# Then restart the daemon:\n/etc/rc.d/powerd restart\n')),(0,a.kt)("p",null,"reboot and check"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo sysctl dev.cpu.0.freq_levels\n")),(0,a.kt)("h2",{id:"swap"},"Swap"),(0,a.kt)("p",null,"4gb swap file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo dd if=/dev/zero of=/usr/swap0 bs=1m count=4096\nsudo chmod 0600 /usr/swap0\n")),(0,a.kt)("p",null,"Add to bottom of /etc/fstab"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"md  none    swap    sw,file=/usr/swap0,late 0   0\n")),(0,a.kt)("p",null,"reboot."),(0,a.kt)("h2",{id:"better-bash"},"Better bash"),(0,a.kt)("p",null,"First source .bashrc at login, create and add the following to .bash_profile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Startup file for login instances of the bash(1) shell.\n\n# First of all, run a .bashrc file if it exists.\ntest -f ~/.bashrc && . ~/.bashrc\n\n# The following section should be pretty minimal, if present at all.\nmesg y >/dev/null 2>&1\n/usr/bin/true\n\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://bash-it.readthedocs.io/en/latest/installation/"},"https://bash-it.readthedocs.io/en/latest/installation/")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n\n~/.bash_it/install.sh\n")),(0,a.kt)("h3",{id:"use-it"},"use it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd\nnano .bashrc\n")),(0,a.kt)("p",null,"Add to bottom"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[[ $PS1 && -f /usr/local/share/bash-completion/bash_completion.sh ]] && \\\n    . /usr/local/share/bash-completion/bash_completion.sh\n")),(0,a.kt)("p",null,"Then"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"chsh -s /usr/local/bin/bash ada\nchsh -s bash\n")),(0,a.kt)("h2",{id:"chrony"},"Chrony"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo nano /etc/rc.conf\n\n")),(0,a.kt)("p",null,"Add to bottom"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'chronyd_enable="YES"\n')),(0,a.kt)("p",null,"Then open"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo nano /usr/local/etc/chrony.conf\n")),(0,a.kt)("p",null,"Replace everything in there with following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pool time.google.com       iburst minpoll 2 maxpoll 2 maxsources 3 maxdelay 0.3\npool time.euro.apple.com   iburst minpoll 2 maxpoll 2 maxsources 3 maxdelay 0.3\npool time.apple.com        iburst minpoll 2 maxpoll 2 maxsources 3 maxdelay 0.3\npool ntp.ubuntu.com        iburst minpoll 2 maxpoll 2 maxsources 3 maxdelay 0.3\n\n# This directive specify the location of the file containing ID/key pairs for\n# NTP authentication.\nkeyfile /etc/chrony/chrony.keys\n\n# This directive specify the file into which chronyd will store the rate\n# information.\ndriftfile /var/lib/chrony/chrony.drift\n\n# Uncomment the following line to turn logging on.\n#log tracking measurements statistics\n\n# Log files location.\nlogdir /var/log/chrony\n\n# Stop bad estimates upsetting machine clock.\nmaxupdateskew 5.0\n\n# This directive enables kernel synchronisation (every 11 minutes) of the\n# real-time clock. Note that it can\u2019t be used along with the 'rtcfile' directive.\nrtcsync\n\n# Step the system clock instead of slewing it if the adjustment is larger than\n# one second, but only in the first three clock updates.\nmakestep 0.1 -1\n\n# Get TAI-UTC offset and leap seconds from the system tz database\nleapsectz right/UTC\n\n# Serve time even if not synchronized to a time source.\nlocal stratum 10\n")),(0,a.kt)("p",null,"Reboot to get time right."),(0,a.kt)("h2",{id:"build-portsnap-db"},"Build portsnap db"),(0,a.kt)("p",null,"Portsnap is being deprecated?\n",(0,a.kt)("a",{parentName:"p",href:"https://marc.info/?l=freebsd-ports&m=159656662608767&w=2"},"https://marc.info/?l=freebsd-ports&m=159656662608767&w=2")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo portsnap fetch\nsudo portsnap extract\n")),(0,a.kt)("h2",{id:"tmux"},"Tmux"),(0,a.kt)("p",null,"let's not build this over ssh\nctrl+b then d to exit tmux terminal\nreattatch to session with:\ntmux attach -t cardano"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"tmux new -s cardano\n")),(0,a.kt)("p",null,"Continue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir git\ncd git\ngit clone -b cardano https://github.com/freebsd/freebsd-ports-haskell.git\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo su\ncp -r freebsd-ports-haskell/net-p2p/cardano-node /usr/ports/net-p2p/cardano-node\n \ncd /usr/ports/ports-mgmt/portmaster && make install clean\n \nportmaster -fR /usr/ports/net-p2p/cardano-node\n")),(0,a.kt)("p",null,"exit tmux ctrl+b then d"),(0,a.kt)("p",null,"Let it run.."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cardano-node --version\n")),(0,a.kt)("p",null,"Edit /usr/local/etc/rc.d/cardano_node "),(0,a.kt)("p",null,"if needed\nAlso, read documentation in that file on how to\nstart cardano-node on boot, etc "),(0,a.kt)("p",null,"Example /etc/rc.conf lines:"),(0,a.kt)("p",null,'cardano_node_enable="YES"'),(0,a.kt)("p",null,'cardano_node_port="3001"'))}m.isMDXComponent=!0}}]);